{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let AuthInterceptor = class AuthInterceptor {\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  intercept(request, next) {\n    // Skip adding Authorization header for login and signup requests\n    if (request.url.includes('/login') || request.url.includes('/signup')) {\n      return next.handle(request);\n    }\n    // Retrieve token from storage\n    const token = this.httpService.getToken();\n    // If token exists, clone request and add Authorization header\n    if (token) {\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(clonedRequest);\n    }\n    // Proceed without adding token if no token found\n    return next.handle(request);\n  }\n};\nAuthInterceptor = __decorate([Injectable()], AuthInterceptor);","map":{"version":3,"names":["Injectable","AuthInterceptor","constructor","httpService","intercept","request","next","url","includes","handle","token","getToken","clonedRequest","clone","setHeaders","Authorization","__decorate"],"sources":["E:\\FrontEnd\\E-CommerceUI\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpServiceService } from './services/http-service.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private httpService: HttpServiceService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Skip adding Authorization header for login and signup requests\n    if (request.url.includes('/login') || request.url.includes('/signup')) {\n      return next.handle(request);\n    }\n\n    // Retrieve token from storage\n    const token = this.httpService.getToken();\n\n    // If token exists, clone request and add Authorization header\n    if (token) {\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      return next.handle(clonedRequest);\n    }\n\n    // Proceed without adding token if no token found\n    return next.handle(request);\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAWnC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,WAA+B;IAA/B,KAAAA,WAAW,GAAXA,WAAW;EAAuB;EAEtDC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA,IAAID,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIH,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;MACrE,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;;IAG7B;IACA,MAAMK,KAAK,GAAG,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACT,MAAME,aAAa,GAAGP,OAAO,CAACQ,KAAK,CAAC;QAClCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;MACF,OAAOJ,IAAI,CAACG,MAAM,CAACG,aAAa,CAAC;;IAGnC;IACA,OAAON,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;EAC7B;CACD;AA5BYJ,eAAe,GAAAe,UAAA,EAD3BhB,UAAU,EAAE,C,EACAC,eAAe,CA4B3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}