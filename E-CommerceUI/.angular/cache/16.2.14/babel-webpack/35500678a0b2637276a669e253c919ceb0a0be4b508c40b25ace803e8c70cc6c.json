{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./http-service.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptorService {\n  constructor(httpService, router) {\n    this.httpService = httpService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Skip adding Authorization header for login and signup requests\n    if (request.url.includes('/login') || request.url.includes('/signup')) {\n      return next.handle(request);\n    }\n    // Retrieve token from storage\n    const token = this.httpService.getToken();\n    // If token exists, clone request and add Authorization header\n    if (token) {\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(clonedRequest);\n    }\n    // Proceed without adding token if no token found\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.HttpServiceService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthInterceptorService","constructor","httpService","router","intercept","request","next","url","includes","handle","token","getToken","clonedRequest","clone","setHeaders","Authorization","_","i0","ɵɵinject","i1","HttpServiceService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["E:\\FrontEnd\\E-CommerceUI\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["// auth-interceptor.service.ts\nimport { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpServiceService } from './http-service.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(\n    private httpService: HttpServiceService,\n    private router: Router\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Skip adding Authorization header for login and signup requests\n    if (request.url.includes('/login') || request.url.includes('/signup')) {\n      return next.handle(request);\n    }\n\n    // Retrieve token from storage\n    const token = this.httpService.getToken();\n\n    // If token exists, clone request and add Authorization header\n    if (token) {\n      const clonedRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      return next.handle(clonedRequest);\n    }\n\n    // Proceed without adding token if no token found\n    return next.handle(request);\n  }}\n"],"mappings":";;;AAiBA,OAAM,MAAOA,sBAAsB;EACjCC,YACUC,WAA+B,EAC/BC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA,IAAID,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIH,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;MACrE,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;;IAG7B;IACA,MAAMK,KAAK,GAAG,IAAI,CAACR,WAAW,CAACS,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACT,MAAME,aAAa,GAAGP,OAAO,CAACQ,KAAK,CAAC;QAClCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;MACF,OAAOJ,IAAI,CAACG,MAAM,CAACG,aAAa,CAAC;;IAGnC;IACA,OAAON,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;EAC7B;EAAC,QAAAW,CAAA,G;qBA9BUhB,sBAAsB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBvB,sBAAsB;IAAAwB,OAAA,EAAtBxB,sBAAsB,CAAAyB,IAAA;IAAAC,UAAA,EAFrB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}