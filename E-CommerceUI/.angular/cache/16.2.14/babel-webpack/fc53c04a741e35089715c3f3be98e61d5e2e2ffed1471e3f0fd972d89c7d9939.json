{"ast":null,"code":"import { __decorate } from \"tslib\";\n// auth-interceptor.service.ts\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nexport let AuthInterceptorService = class AuthInterceptorService {\n  constructor(httpService, router) {\n    this.httpService = httpService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Retrieve the token from HttpServiceService\n    const token = this.httpService.getToken();\n    // If token exists, clone the request and add the Authorization header\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Handle the HTTP request with error catching\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized errors by redirecting to login\n      if (error.status === 401) {\n        // Optional: Clear the token if unauthorized error occurs\n        this.httpService.setToken('');\n        this.router.navigate(['/login']);\n      }\n      // Log error and rethrow it\n      console.error('Interceptor error', error);\n      return throwError(() => error);\n    }));\n  }\n};\nAuthInterceptorService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthInterceptorService);","map":{"version":3,"names":["Injectable","throwError","catchError","AuthInterceptorService","constructor","httpService","router","intercept","request","next","token","getToken","clone","setHeaders","Authorization","handle","pipe","error","status","setToken","navigate","console","__decorate","providedIn"],"sources":["E:\\FrontEnd\\E-CommerceUI\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["// auth-interceptor.service.ts\nimport { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpServiceService } from './services/http-service.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(\n    private httpService: HttpServiceService,\n    private router: Router\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Retrieve the token from HttpServiceService\n    const token = this.httpService.getToken();\n\n    // If token exists, clone the request and add the Authorization header\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    // Handle the HTTP request with error catching\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle 401 Unauthorized errors by redirecting to login\n        if (error.status === 401) {\n          // Optional: Clear the token if unauthorized error occurs\n          this.httpService.setToken('');\n          this.router.navigate(['/login']);\n        }\n        // Log error and rethrow it\n        console.error('Interceptor error', error);\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAQ1C,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAOpC,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EACjCC,YACUC,WAA+B,EAC/BC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACA,IAAI,CAACb,WAAW,CAACc,QAAQ,CAAC,EAAE,CAAC;QAC7B,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC;MACAC,OAAO,CAACJ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAOhB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;CACD;AArCYd,sBAAsB,GAAAmB,UAAA,EAHlCtB,UAAU,CAAC;EACVuB,UAAU,EAAE;CACb,CAAC,C,EACWpB,sBAAsB,CAqClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}