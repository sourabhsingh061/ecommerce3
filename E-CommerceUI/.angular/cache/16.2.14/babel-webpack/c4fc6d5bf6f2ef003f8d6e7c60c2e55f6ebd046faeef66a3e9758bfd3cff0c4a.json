{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      console.log('in auth service intercept method....!!!');\n      if (localStorage.getItem('name') && localStorage.getItem('token')) {\n        this.token = localStorage.getItem('token');\n        req = req.clone({\n          setHeaders: {\n            \"withCredentials\": \"true\",\n            \"name\": \"Sawan\",\n            Authorization: this.token\n          }\n        });\n      }\n      console.log(req.headers.get(\"Authorization\"));\n      return next.handle(req).pipe(catchError(error => {\n        if (error.status === 401) {\n          localStorage.clear();\n          this.router.navigate(['/login'], {\n            queryParams: {\n              errorMessage: error.error\n            }\n          });\n        }\n        if (error.status === 403) {\n          localStorage.clear();\n          this.router.navigate(['/login'], {\n            queryParams: {\n              errorMessage: 'Token is expired... plz login again..!!'\n            }\n          });\n        }\n        return throwError(error);\n      }));\n    }\n    static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n      return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptorService,\n      factory: AuthInterceptorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}