{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthInterceptorService {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(req, next) {\n    console.log('in auth service intercept method....!!!');\n    if (localStorage.getItem('firstName') && localStorage.getItem('token')) {\n      this.token = localStorage.getItem('token');\n      req = req.clone({\n        setHeaders: {\n          \"withCredentials\": \"true\",\n          \"name\": \"Sawan\",\n          Authorization: this.token\n        }\n      });\n    }\n    console.log(req.headers.get(\"Authorization\"));\n    return next.handle(req).pipe(catchError(error => {\n      if (error.status === 401) {\n        localStorage.clear();\n        this.router.navigate(['/login'], {\n          queryParams: {\n            errorMessage: error.error\n          }\n        });\n      }\n      if (error.status === 403) {\n        localStorage.clear();\n        this.router.navigate(['/login'], {\n          queryParams: {\n            errorMessage: 'Token is expired... plz login again..!!'\n          }\n        });\n      }\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptorService","constructor","router","intercept","req","next","console","log","localStorage","getItem","token","clone","setHeaders","Authorization","headers","get","handle","pipe","error","status","clear","navigate","queryParams","errorMessage","_","i0","ɵɵinject","i1","Router","_2","factory","ɵfac","providedIn"],"sources":["E:\\FrontEnd\\E-CommerceUI\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  token: any\n\n  constructor(private router: Router) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    console.log('in auth service intercept method....!!!')\n\n    if (localStorage.getItem('firstName') && localStorage.getItem('token')) {\n      this.token = localStorage.getItem('token')\n      req = req.clone({\n        setHeaders: {\n          \"withCredentials\": \"true\",\n          \"name\": \"Sawan\",\n          Authorization: this.token\n        }\n      })\n    }\n    console.log(req.headers.get(\"Authorization\"))\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          localStorage.clear();\n          this.router.navigate(['/login'], {\n            queryParams: { errorMessage: error.error },\n          });\n        }\n\n        if (error.status === 403) {\n          localStorage.clear();\n          this.router.navigate(['/login'], {\n            queryParams: { errorMessage: 'Token is expired... plz login again..!!' },\n          });\n        }\n        return throwError(error);\n      })\n    );\n  }}\n"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,sBAAsB;EAIjCC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAY;EAEtCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAEhDC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IAEtD,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MACtE,IAAI,CAACC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC1CL,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC;QACdC,UAAU,EAAE;UACV,iBAAiB,EAAE,MAAM;UACzB,MAAM,EAAE,OAAO;UACfC,aAAa,EAAE,IAAI,CAACH;;OAEvB,CAAC;;IAEJJ,OAAO,CAACC,GAAG,CAACH,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC7C,OAAOV,IAAI,CAACW,MAAM,CAACZ,GAAG,CAAC,CAACa,IAAI,CAC1BlB,UAAU,CAAEmB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxBX,YAAY,CAACY,KAAK,EAAE;QACpB,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAC/BC,WAAW,EAAE;YAAEC,YAAY,EAAEL,KAAK,CAACA;UAAK;SACzC,CAAC;;MAGJ,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxBX,YAAY,CAACY,KAAK,EAAE;QACpB,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAC/BC,WAAW,EAAE;YAAEC,YAAY,EAAE;UAAyC;SACvE,CAAC;;MAEJ,OAAOzB,UAAU,CAACoB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC,QAAAM,CAAA,G;qBAvCUxB,sBAAsB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtB7B,sBAAsB;IAAA8B,OAAA,EAAtB9B,sBAAsB,CAAA+B,IAAA;IAAAC,UAAA,EAFrB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}