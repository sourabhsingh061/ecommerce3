{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let AuthInterceptor = class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Get the auth headers from the AuthService\n    const authHeaders = this.authService.getAuthHeaders();\n    // Clone the request and add the Authorization header\n    const clonedRequest = request.clone({\n      headers: authHeaders\n    });\n    return next.handle(clonedRequest);\n  }\n};\nAuthInterceptor = __decorate([Injectable()], AuthInterceptor);","map":{"version":3,"names":["Injectable","AuthInterceptor","constructor","authService","intercept","request","next","authHeaders","getAuthHeaders","clonedRequest","clone","headers","handle","__decorate"],"sources":["E:\\FrontEnd\\E-CommerceUI\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Get the auth headers from the AuthService\n    const authHeaders = this.authService.getAuthHeaders();\n    // Clone the request and add the Authorization header\n    const clonedRequest = request.clone({ headers: authHeaders });\n    return next.handle(clonedRequest);\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAWnC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE;IACrD;IACA,MAAMC,aAAa,GAAGJ,OAAO,CAACK,KAAK,CAAC;MAAEC,OAAO,EAAEJ;IAAW,CAAE,CAAC;IAC7D,OAAOD,IAAI,CAACM,MAAM,CAACH,aAAa,CAAC;EACnC;CACD;AAbYR,eAAe,GAAAY,UAAA,EAD3Bb,UAAU,EAAE,C,EACAC,eAAe,CAa3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}